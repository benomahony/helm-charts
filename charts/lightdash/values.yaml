lightdashConfigMap:
  # -- Prevent login with a password, essentially only permitting OpenID credentials.
  AUTH_DISABLE_PASSWORD_AUTHENTICATION: "false"
  # -- Path to your local dbt project. Only set this value if you are mounting a DBT project
  DBT_PROJECT_DIR: ""
  # -- Path to a lightdash.yml file to configure Lightdash. This is set by default and if you're using docker you shouldn't change it.
  LIGHTDASH_CONFIG_FILE: "/usr/app/lightdash.yml"
  # -- One of `error`, `warn`, `info`, `http`, `debug`
  LIGHTDASH_LOG_LEVEL: ""
  # -- Unique install ID. Random UUID generated by default.
  LIGHTDASH_INSTALL_ID: ""
  # -- One of `docker_image`, `bash_install`, `heroku`, `unknown`
  LIGHTDASH_INSTALL_TYPE: "docker_image"
  # -- One of `default`, `demo`, `pr`, `cloud_beta`
  LIGHTDASH_MODE: default
  # -- Port for lightdash
  PORT: "8080"
  # -- Only allows cookies to be stored over a https connection. We use cookies to keep you logged in. This is recommended to be set to true in production.
  SECURE_COOKIES: "false"
  # -- Site url where Lightdash is being hosted. It should include the protocol. E.g https://lightdash.mycompany.com
  SITE_URL: ""
  # -- This tells the Lightdash server that it can trust the X-Forwarded-Proto header it receives in requests. This is useful if you use SECURE_COOKIES=true behind a HTTPS terminated proxy that you can trust.
  TRUST_PROXY: "false"

lightdashSecrets:
  AUTH_GOOGLE_OAUTH2_CLIENT_ID: ""
  AUTH_GOOGLE_OAUTH2_CLIENT_SECRET: ""
  CHATWOOT_BASE_URL: ""
  CHATWOOT_TOKEN: ""
  COHERE_TOKEN: ""
  # -- Secret key used to secure various tokens in Lightdash. This must be fixed between deployments. If the secret changes, you won't have access to Lightdash data.
  LIGHTDASH_SECRET: changeme
  RUDDERSTACK_DATA_PLANE_URL: ""
  RUDDERSTACK_WRITE_KEY: ""
  # -- Sentry Integration DSN
  SENTRY_DSN: ""

emailConfigMap:
  # -- Hostname of email server. Empty string disables email.
  EMAIL_SMTP_HOST: ""
  # -- Port of email server
  EMAIL_SMTP_PORT: "587"
  # -- 	Secure connection
  EMAIL_SMTP_SECURE: "true"
  # -- Allow connection to TLS server with self-signed or invalid TLS certificate
  EMAIL_SMTP_ALLOW_INVALID_CERT: "false"
  # -- The email address that sends emails
  EMAIL_SMTP_SENDER_EMAIL: ""
  # -- The name of the email address that sends emails
  EMAIL_SMTP_SENDER_NAME: Lightdash

emailSecrets:
  # -- Auth user
  EMAIL_SMTP_USER: ""
  # -- Auth password
  EMAIL_SMTP_PASSWORD: ""
  # -- Auth access token for Oauth2 authentication
  EMAIL_SMTP_ACCESS_TOKEN: ""

databaseConfigMap:
  # -- Database name inside postgres server to store Lightdash data
  PGDATABASE: lightdash
  # -- Hostname of postgres server to store Lightdash data
  PGHOST: lightdashdb-postgresql.default.svc.cluster.local
  # -- Port of postgres server to store Lightdash data
  PGPORT: "5432"
  # -- Maximum number of connections to postgres server
  PGMAXCONNECTIONS: "100"
  # -- Minimum number of connections to postgres server
  PGMINCONNECTIONS: "1"

databaseSecrets:
  # -- Username of postgres user to access postgres server to store Lightdash data
  PGUSER: lightdash
  # -- 	Password for PGUSER
  PGPASSWORD: changeme
  # -- 	Connection URI for postgres server to store Lightdash data in the format postgresql://user:password@host:port/db?params
  PGCONNECTIONURI: ""

# -- Specify the number of lightdash instances.
replicaCount: 1

image:
  repository: lightdash/lightdash
  pullPolicy: IfNotPresent
  # -- Override the image tag
  tag: "0.27.1"
  command: []
  args: []

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
